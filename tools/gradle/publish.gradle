configure([
        project(':api'),
        project(':basicdataset'),
        project(':dlr:dlr-engine'),
        project(':extensions:aws-ai'),
        project(':extensions:fasttext'),
        project(':extensions:hadoop'),
        project(':extensions:sentencepiece'),
        project(':model-zoo'),
        project(':mxnet:mxnet-engine'),
        project(':mxnet:mxnet-model-zoo'),
        project(':onnxruntime:onnxruntime-engine'),
        project(':paddlepaddle:paddlepaddle-engine'),
        project(':paddlepaddle:paddlepaddle-model-zoo'),
        project(':pytorch:pytorch-engine'),
        project(':pytorch:pytorch-model-zoo'),
        project(':serving:serving'),
        project(':tensorflow:tensorflow-api'),
        project(':tensorflow:tensorflow-engine'),
        project(':tensorflow:tensorflow-model-zoo'),
        project(':tflite:tflite-engine'),
        project(':ml:xgboost')]) {
    apply plugin: "maven-publish"
    apply plugin: "signing"

    project.tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    javadoc {
        title "Deep Java Library ${version} - ${project.name} API"
        options.encoding = "UTF-8"
        options.overview "src/main/javadoc/overview.html"
        options.addBooleanOption("-allow-script-in-comments", true)
        options.header "<script type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>"
    }

    task uploadJavadoc(type: Exec) {
        dependsOn javadoc
        enabled = (project.name != ":mxnet:native" && project.name != ":examples")
        commandLine "sh", "-c", "find . -name .DS_Store | xargs rm && aws s3 sync build/docs/javadoc s3://javadoc-djl-ai/${project.name}/${version} > build/upload.log"
    }

    signing {
        required(project.hasProperty("staging") || project.hasProperty("snapshot"))
        def signingKey = findProperty("signingKey")
        def signingPassword = findProperty("signingPassword")
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
                artifacts = [jar, javadocJar, sourcesJar]
                pom {
                    name = "Deep Java Library - ${project.name}"
                    description = "Deep Java Library - ${project.name}"
                    url = "http://www.djl.ai/${project.name}"

                    packaging = "jar"

                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'https://www.apache.org/licenses/LICENSE-2.0'
                        }
                    }

                    scm {
                        connection = "scm:git:git@github.com:deepjavalibrary/djl.git"
                        developerConnection = "scm:git:git@github.com:deepjavalibrary/djl.git"
                        url = "https://github.com/deepjavalibrary/djl"
                        tag = "HEAD"
                    }

                    developers {
                        developer {
                            name = "DJL.AI Team"
                            email = "djl-dev@amazon.com"
                            organization = "Amazon AI"
                            organizationUrl = "https://amazon.com"
                        }
                    }
                }
            }
        }

        repositories {
            maven {
                if (project.hasProperty("snapshot")) {
                    name = "snapshot"
                    url = "https://oss.sonatype.org/content/repositories/snapshots/"
                    credentials {
                        username = findProperty("ossrhUsername")
                        password = findProperty("ossrhPassword")
                    }
                } else if (project.hasProperty("staging")) {
                    name = "staging"
                    url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                    credentials {
                        username = findProperty("ossrhUsername")
                        password = findProperty("ossrhPassword")
                    }
                } else {
                    name = "local"
                    url = "build/repo"
                }
            }
        }
    }
}
