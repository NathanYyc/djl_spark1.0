/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java'
    id 'maven-publish'
}

configurations {
    childJars
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
    api "commons-cli:commons-cli:${commons_cli_version}"
    api 'org.apache.spark:spark-core_2.12:3.0.1'
    api 'org.apache.spark:spark-sql_2.12:3.0.1'
    api 'commons-cli:commons-cli:1.4'
    api 'io.netty:netty-all:4.1.56.Final'
    api project(":basicdataset")
    api project(":api")
    api project(":model-zoo")
    api project(":examples")
    api 'ai.djl.mxnet:mxnet-native-auto:1.8.0'
    implementation 'junit:junit:4.12'

    if (System.getProperty("ai.djl.default_engine") == "PyTorch") {
        api project(":pytorch:pytorch-model-zoo")
        api "ai.djl.pytorch:pytorch-native-auto:${pytorch_version}-SNAPSHOT"
    } else if (System.getProperty("ai.djl.default_engine") == "TensorFlow") {
        api project(":tensorflow:tensorflow-model-zoo")
        api "ai.djl.tensorflow:tensorflow-native-auto:${tensorflow_version}-SNAPSHOT"
    } else {
        api project(":mxnet:mxnet-model-zoo")
        api "ai.djl.mxnet:mxnet-native-auto:${mxnet_version}"
    }

    // DLR, tflite, PaddlePaddle and OnnxRuntime are only used for benchmark
    if (System.getProperty("ai.djl.default_engine") == "DLR") {
        api project(":dlr:dlr-engine")
        api "ai.djl.dlr:dlr-native-auto:${dlr_version}"
    } else if (System.getProperty("ai.djl.default_engine") == "TFLite") {
        api project(":tflite:tflite-engine")
        api "ai.djl.tflite:tflite:tflite-native:${tflite_version}"
    } else if (System.getProperty("ai.djl.default_engine") == "PaddlePaddle") {
        api project(":paddlepaddle:paddlepaddle-model-zoo")
        api "ai.djl.paddlepaddle:paddlepaddle-native-auto:${paddlepaddle_version}"
    } else if (System.getProperty("ai.djl.default_engine") == "OnnxRuntime") {
        // onnxruntime requires user install libgomp.so.1 manually, exclude from default dependency
        api project(":onnxruntime:onnxruntime-engine")
    }

    subprojects.each {
        childJars project(it.path)
    }
}

group = 'ai.djl'
version = '0.12.0-SNAPSHOT'
description = 'djl-spark'
java.sourceCompatibility = JavaVersion.VERSION_1_8

jar {
    manifest {
        attributes (
                "Main-Class" : "ai.djl.spark.Bert",
                "Multi-Release" : true
        )
    }
    includeEmptyDirs = false
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}
